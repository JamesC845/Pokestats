# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(input$Attacker,
input$Move,
input$Defender)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Gen V Pokemon Damage Calculator"),
theme = shinytheme("cerulean")
sidebarLayout(
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Gen V Pokemon Damage Calculator"),
theme = shinytheme("cerulean"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(input$Attacker,
input$Move,
input$Defender)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("purple"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("yeti"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(input$Attacker,
input$Move,
input$Defender)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("yeti"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(input$Attacker,
input$Move,
input$Defender)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
args(predic)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("yeti"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name),
# Input for the first parameter
numericInput("AttackerLevel", "Attacker Level:", value = 50),
# Input for the first parameter
numericInput("DefenderLevel", "Defender Level:", value = 50)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(attacker = input$Attacker,
move = input$Move,
defender = input$Defender,
attacker_level = input$AttackerLevel,
defender_level = input$DefenderLevel
)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("united"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name),
# Input for the first parameter
numericInput("AttackerLevel", "Attacker Level:", value = 50),
# Input for the first parameter
numericInput("DefenderLevel", "Defender Level:", value = 50)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(attacker = input$Attacker,
move = input$Move,
defender = input$Defender,
attacker_level = input$AttackerLevel,
defender_level = input$DefenderLevel
)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("united"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the first parameter
numericInput("AttackerLevel", "Attacker Level:", value = 50),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name),
# Input for the first parameter
numericInput("DefenderLevel", "Defender Level:", value = 50)
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name),
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("united"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the first parameter
numericInput("AttackerLevel", "Attacker Level:", value = 50),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name),
# Input for the first parameter
numericInput("DefenderLevel", "Defender Level:", value = 50),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(attacker = input$Attacker,
move = input$Move,
defender = input$Defender,
attacker_level = input$AttackerLevel,
defender_level = input$DefenderLevel
)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load the shiny package
library(shiny)
library(shinythemes)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("PokeMMO Damage Calculator"),
theme = shinytheme("spacelab"),
sidebarLayout(
sidebarPanel(
# Input for the third parameter
selectInput("Attacker", "Attacker:", choices = pokedex$Name),
# Input for the first parameter
numericInput("AttackerLevel", "Attacker Level:", value = 50),
# Input for the third parameter
selectInput("Defender", "Defender:", choices = pokedex$Name),
# Input for the first parameter
numericInput("DefenderLevel", "Defender Level:", value = 50),
# Input for the second parameter
selectInput("Move", "Move:", choices = pokemoves$Name)
),
mainPanel(
# Output for the result
verbatimTextOutput("calculator_explanation_1"),
verbatimTextOutput("calculator_explanation_2"),
verbatimTextOutput("calculator_explanation_3"),
dataTableOutput("resultTable")
)
)
)
# Define the server logic
server <- function(input, output) {
# Call the custom function based on user input
compute_result <- reactive({
predic(attacker = input$Attacker,
move = input$Move,
defender = input$Defender,
attacker_level = input$AttackerLevel,
defender_level = input$DefenderLevel
)
})
# Render the result as a DataTable
output$resultTable <- renderDataTable({
compute_result()},
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE
))
# add textbox
output$calculator_explanation_1 <- renderText({
"Attacking pokemon has 31 IVs and 252 EVs for its attack stat"
})
# add textbox
output$calculator_explanation_2 <- renderText({
"Defending pokemon, from Low/Mid/High stats, has 31 IVs and 0/126/252 EVs respectively for its defence and HP stat"
})
# add textbox
output$calculator_explanation_3 <- renderText({
"The range of damage is determined by all possible combinations of neutral and beneficial natures"
})
}
# Run the Shiny app
shinyApp(ui, server)
rsconnect::setAccountInfo(name='jamesc845',
token='BD3CC2AFBB6EE9C7A7709FBA2CD936DF',
secret='glnGZ/yoZua7aIWpsJynTLxww1XhsN7LlUZr8yN1')
rsconnect::deployApp()
rsconnect::deployApp()
